#!/usr/bin/env python

import openai
import datasets
import numpy as np
from tqdm import tqdm
from datasets import Dataset

from prompt_eng import questions
from prompt_eng.prompts import Prompt

def main():
	with open('api_key', 'r') as f:
		openai.api_key = f.read().strip()

	ds = load_ds()
	categories = set(ds['Category'])

	# document types
	doc_type = {
		'singular' : 'privacy policy',
		'plural' : 'privacy policies',
	}

	# contextual knowledge of documents
	context = f'These {doc_type["plural"]} are used to disclose how certain companies collect user data and how that data is shared.'

	quest = questions.init()
	breakpoint()

	prompt_generator = Prompt(
		quest, 
		doc_type,
		context,
	)
	
	num_choices = 3

	candidates = {}
	for i, sample in enumerate(ds):
		if len(sample['Company_1']) + len(sample['Company_2']) < 3500:
			candidates[i] = sample
	
	breakpoint()

	sample_ids = []
	while len(sample_ids) < num_choices:
		candidate = int(np.random.choice(len(ds)))
		sample = ds[candidate]
		if len(sample['Company_1']) + len(sample['Company_2']) < 3500:
			sample_ids.append(candidate)
	
	all_messages = []
	for i in tqdm(sample_ids, total=len(sample_ids), desc='building prompts and gathering responses'):
		sample = ds[int(i)]
		prompts = prompt_generator.gen_prompts([
				sample['Company_1'],
				sample['Company_2'],
		])
		messages = [
			{
				'role' : 'user', 
				'row' : int(i),
				'type' : key,
				'content' : val
			}
			for (key, val) in prompts.items()
		]
		for j, msg in enumerate(messages):
			
			response = openai.ChatCompletion.create(
				model="gpt-3.5-turbo",
				messages=[{
					'role' : 'user',
					'content' : msg['content']
				}]
			)
			messages[j].update({
				'response' : response['choices'][0]['message']['content']
			})
		all_messages += messages

	output_ds = Dataset.from_list(all_messages)
	output_ds.to_csv('results.csv')

def load_ds():
	ds = datasets.load_dataset(
		'csv',
		data_files=['/data/john/datasets/privacy_policy/final_with_v2csv.csv'],
		num_proc=10,
		cache_dir='./.cache'
		
	)
	return ds['train']

def rand_ex(candidates, category='Other'):
	examples = {key:val for key, val in candidates.items() if val['Category'] == category}
	import json
	from copy import deepcopy
	ex = deepcopy(examples[np.random.choice(list(examples.keys()))])
	print(f'\"Company_1" : {ex.pop("Company_1")}\n')
	print(f'\"Company_2" : {ex.pop("Company_2")}\n')
	print(json.dumps(ex, indent=4))

if __name__ == '__main__':
	main()
